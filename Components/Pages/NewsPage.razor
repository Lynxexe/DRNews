@using System.Collections.Generic;
@using System.Reflection.Metadata;
@using System.Xml.Linq;
@using System.Windows.Input
@using DRNews.Model
@using DRNews.Service
@page "/news/{selectedCategory}"
@inject INewsService newsService

@if (newsItems == null)
{
    <p>Loading...</p>
}


@if(selectedNewsItem == null && newsItems != null)
{
        @foreach (var item in newsItems)
        {
            <div class="news-container" @onclick="() => OpenNewsItem(item)">
                @if (!string.IsNullOrEmpty(item.Image))
                {
                    <div class="image-container">
                        <img src="@item.Image" alt="News Image" class="news-image" />
                    </div>
                }
                else
                {
                    <div class="image-container">
                        <img src="images/newsimage.jpg" alt="News Image" class="news-image" />
                    </div>
                }
                <div class="content-container">
                    <h4>@item.Title</h4>

                    <p class="news-date">@item.Date</p>
                </div>
            </div>
        }
}
else if(selectedNewsItem != null)
{
    @if (!string.IsNullOrEmpty(selectedNewsItem.Image))
    {
        <div class="image-container">
            <img src="@selectedNewsItem.Image" alt="News Image" class="news-image" />
        </div>
    }
    else
    {
        <div class="image-container">
            <img src="images/newsimage.jpg" alt="News Image" class="news-image" />
        </div>
    }
    <div class="news-item">

        <h2>@selectedNewsItem.Title</h2>

        @foreach (var sentence in selectedNewsItem.Content.Split('\n'))
        {
            <p>@sentence</p>
        }
        <button class="btn btn-primary btn-lg btn-block" id="lukKnap" @onclick="CloseNewsItem">Close</button>
    </div>
}
@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; }
    private List<NewsItem> newsItems;
    private NewsItem selectedNewsItem;

    [Parameter]
    public string selectedCategory { get; set; } = "SenesteNyt";

    public string Filter { get; set; } = "";

    private Timer updateTimer;
    private readonly TimeSpan updateInterval = TimeSpan.FromSeconds(30); 

    protected override async Task OnInitializedAsync()
    {
        await LoadNewsItems(selectedCategory, Filter);
        selectedNewsItem = null;
        MessagingCenter.Subscribe<MainPage, Message>(this, "CategorySelected", async (sender, message) =>
    {
        selectedNewsItem = null;
        selectedCategory = message.Category;
        Filter = message.Filter;

        await LoadNewsItems(selectedCategory, Filter);
        StateHasChanged();
    });
        updateTimer = new Timer(async (_) => await UpdateNewsFeed(), null, TimeSpan.Zero, updateInterval);
    }

    private async Task LoadNewsItems(string category, string filter)
    {
        newsItems = await newsService.GetNewsAsync(category,Filter);
        selectedNewsItem = null;
    }
    private async Task UpdateNewsFeed()
    {
        Console.WriteLine("Updating news feed...");
        newsItems = await newsService.UpdateNewsFeed(newsItems, selectedCategory, Filter);

        await InvokeAsync(() => StateHasChanged());
    }
    private async Task OpenNewsItem(NewsItem item)
    {
        var content = await newsService.GetNewsItemHtmlAsync(item.Link);
        Console.WriteLine(content);
        selectedNewsItem = item;
        selectedNewsItem.Content = content;
        await InvokeAsync(() => StateHasChanged());
    }
    private void CloseNewsItem()
    {
        
        selectedNewsItem = null;
        StateHasChanged();
    }

}

